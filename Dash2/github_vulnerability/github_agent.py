import random
from Dash2.core.dash import DASHAgent
from Dash2.socsim.socsim_agent import SocsimDecisionData, SocsimMixin, ResourceEventTypePair
from Dash2.socsim.output_event_log_utils import random_pick_sorted
from Dash2.socsim.event_types import github_events, github_events_list


class GithubDecisionData(SocsimDecisionData):

    platform_events_map = github_events

    def initialize_using_user_profile(self, profile, hub):
        SocsimDecisionData.initialize_using_user_profile(self, profile, hub)


class GithubMixin(SocsimMixin):

    def __init__(self, **kwargs):
        SocsimMixin.__init__(self, **kwargs)

    def _new_empty_decision_object(self):
        return GithubDecisionData()

    def vulnerability_event(self, selected_res):
        if "ve" not in self.hub.graph.nodes[selected_res]:
            self.hub.graph.nodes[selected_res]["ve"] = 0
        self.hub.graph.nodes[selected_res]["ve"] += 1

    def customAgentLoop(self):
        pair = random_pick_sorted(self.decision_data.event_res_pairs, self.decision_data.event_res_pairs_prob)
        selected_event = github_events_list[pair.event_index]
        selected_res = pair.res_id

        if "idnt" in self.hub.graph.nodes[self.decision_data.id] and \
                random.uniform(0, 1) <= self.hub.graph.nodes[self.decision_data.id]["idnt"]:
            self.vulnerability_event(selected_res)
        else:
            if "inrt" in self.hub.graph.nodes[self.decision_data.id] and \
                    random.uniform(0, 1) <= self.hub.graph.nodes[self.decision_data.id]["intr"]:
                self.vulnerability_event(selected_res)
            else:
                if "vln" in self.hub.graph.nodes[selected_res] and \
                        random.uniform(0, 1) <= self.hub.graph.nodes[selected_res]["vln"]:
                    self.vulnerability_event(selected_res)

        #self.hub.log_event(self.decision_data.id, selected_res, selected_event, self.hub.time)

        return False


class GithubAgent(GithubMixin, DASHAgent):
    def __init__(self, **kwargs):
        DASHAgent.__init__(self)
        GithubMixin.__init__(self, **kwargs)



class GithubBaseMixin(SocsimMixin):

    def __init__(self, **kwargs):
        SocsimMixin.__init__(self, **kwargs)

    def _new_empty_decision_object(self):
        return GithubDecisionData()

    def vulnerability_event(self, selected_res):
        if "ve" not in self.hub.graph.nodes[selected_res]:
            self.hub.graph.nodes[selected_res]["ve"] = 0
        self.hub.graph.nodes[selected_res]["ve"] += 1

    def customAgentLoop(self):
        pair = random_pick_sorted(self.decision_data.event_res_pairs, self.decision_data.event_res_pairs_prob)
        selected_event = github_events_list[pair.event_index]
        selected_res = pair.res_id

        if "vln" in self.hub.graph.nodes[selected_res] and \
                random.uniform(0, 1) <= self.hub.graph.nodes[selected_res]["vln"]:
            self.vulnerability_event(selected_res)

        #self.hub.log_event(self.decision_data.id, selected_res, selected_event, self.hub.time)

        return False


class GithubBaseAgent(GithubBaseMixin, DASHAgent):
    def __init__(self, **kwargs):
        DASHAgent.__init__(self)
        GithubBaseMixin.__init__(self, **kwargs)


