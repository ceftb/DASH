import sys; sys.path.extend(['../../'])
import cPickle as pickle


def count_true_positives(sim, gt, pop_threshold=0):
    number_of_true_positives = 0

    for repo_id in sim.iterkeys():
        if repo_id in gt:
            if sim[repo_id] >= pop_threshold:
                number_of_true_positives += 1

    return number_of_true_positives


def count_false_positives(sim, gt, pop_threshold=0):
    number_of_false_positives = 0

    for repo_id in sim.iterkeys():
        if repo_id not in gt:
            if sim[repo_id] >= pop_threshold:
                number_of_false_positives += 1

    return number_of_false_positives


def count_elements(data, pop_threshold=0):
    number_of_sleceted_elements = 0

    for pop in data.itervalues():
        if pop >= pop_threshold:
            number_of_sleceted_elements += 1

    return number_of_sleceted_elements


if __name__ == "__main__":
    f_gt_pop = sys.argv[1]
    simulation_pop = []
    number_of_simulations = len(sys.argv) - 2
    for i in range(2, len(sys.argv)):
        f_simulation_pop = sys.argv[i]
        simulation_pop.append(pickle.load(open(f_simulation_pop, "r")))

    gt_pop = pickle.load(open(f_gt_pop, "r"))

    total_number_of_repos = 3245042

    print "popularity_threshold, TP, FP, FN, TN, total, precision, recall, sensitivity_tpr, specificity_tnr, fpr"
    for sim_index in range(number_of_simulations):
        for pop_threshold in range(0, 11):
            true_positives = count_true_positives(simulation_pop[sim_index], gt_pop, pop_threshold)
            false_positives = count_false_positives(simulation_pop[sim_index], gt_pop, pop_threshold)

            selected_elements = count_elements(simulation_pop[sim_index], pop_threshold)
            relevant_elements = count_elements(gt_pop, pop_threshold)

            false_negatives = relevant_elements - true_positives
            true_negatives = total_number_of_repos - false_positives

            precision = float(true_positives) / float(selected_elements) if selected_elements != 0 else "n/a"
            recall = float(true_positives) / float(relevant_elements) if relevant_elements != 0 else "n/a"
            sensitivity = float(true_positives) / float(relevant_elements) if relevant_elements != 0 else "n/a"  # TPR
            specificity = float(true_negatives) / float(true_negatives + false_positives) if (true_negatives + false_positives) != 0 else "n/a"
            fpr = float(false_positives) / float(false_positives + true_negatives) if float(false_positives + true_negatives) != 0 else "n/a"
            print pop_threshold, ",", true_positives, ",", false_positives, ",", false_negatives, ",", true_negatives, \
                ",", total_number_of_repos, ",", precision, ",", recall, ",", sensitivity, ",", specificity, ",", fpr

